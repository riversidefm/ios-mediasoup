diff --git a/include/Handler.hpp b/include/Handler.hpp
index 656fe53..b7889e5 100644
--- a/include/Handler.hpp
+++ b/include/Handler.hpp
@@ -100,6 +100,10 @@ namespace mediasoupclient
 		  const nlohmann::json& sendingRtpParametersByKind,
 		  const nlohmann::json& sendingRemoteRtpParametersByKind = nlohmann::json());
 
+		void setTransceiverCallback(std::function<void(rtc::scoped_refptr<webrtc::RtpTransceiverInterface>)> callback) {
+			transceiverCallback = callback;
+		}
+
 	public:
 		SendResult Send(
 		  webrtc::MediaStreamTrackInterface* track,
@@ -119,6 +123,7 @@ namespace mediasoupclient
 		// Generic sending RTP parameters for audio and video suitable for the SDP
 		// remote answer.
 		nlohmann::json sendingRemoteRtpParametersByKind;
+		std::function<void(rtc::scoped_refptr<webrtc::RtpTransceiverInterface>)> transceiverCallback;
 	};
 
 	class RecvHandler : public Handler
diff --git a/include/Transport.hpp b/include/Transport.hpp
index 90f3468..c803932 100644
--- a/include/Transport.hpp
+++ b/include/Transport.hpp
@@ -111,6 +111,9 @@ namespace mediasoupclient
 			  const std::string& protocol,
 			  const nlohmann::json& appData) = 0;
 		};
+        
+	public:
+		void setTransceiverCallback(std::function<void(rtc::scoped_refptr<webrtc::RtpTransceiverInterface>)> callback);
 
 	private:
 		SendTransport(
diff --git a/src/Handler.cpp b/src/Handler.cpp
index a53398f..6493c9e 100644
--- a/src/Handler.cpp
+++ b/src/Handler.cpp
@@ -342,6 +342,10 @@ namespace mediasoupclient
 			}
 		}
 
+		if (this->transceiverCallback) {
+			this->transceiverCallback(transceiver);
+		}
+
 		this->remoteSdp->Send(
 		  offerMediaObject,
 		  mediaSectionIdx.reuseMid,
diff --git a/src/Transport.cpp b/src/Transport.cpp
index cc1cbef..1d5833c 100644
--- a/src/Transport.cpp
+++ b/src/Transport.cpp
@@ -369,6 +369,10 @@ namespace mediasoupclient
 		return this->sendHandler->GetSenderStats(producer->GetLocalId());
 	}
 
+	void SendTransport::setTransceiverCallback(std::function<void(rtc::scoped_refptr<webrtc::RtpTransceiverInterface>)> callback) {
+		this->sendHandler->setTransceiverCallback(callback);
+	}
+
 	/* RecvTransport */
 
 	RecvTransport::RecvTransport(
